// <auto-generated />
using System;
using GrifballWebApp.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GrifballWebApp.Database.Migrations
{
    [DbContext(typeof(GrifballContext))]
    [Migration("20240407020434_AddCaptainsLocked")]
    partial class AddCaptainsLocked
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrifballWebApp.Database.Models.GameVersion", b =>
                {
                    b.Property<int>("GameVesionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameVesionID"));

                    b.Property<string>("GameVersionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("GameVesionID");

                    b.HasIndex("GameVersionName")
                        .IsUnique();

                    b.ToTable("GameVersions", "ITS");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("GameVersionsHistory", "ITS");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            GameVesionID = 1,
                            GameVersionName = "Halo 3"
                        },
                        new
                        {
                            GameVesionID = 2,
                            GameVersionName = "Halo Reach"
                        },
                        new
                        {
                            GameVesionID = 3,
                            GameVersionName = "Halo Reach Dash"
                        },
                        new
                        {
                            GameVesionID = 4,
                            GameVersionName = "Halo 4"
                        },
                        new
                        {
                            GameVesionID = 5,
                            GameVersionName = "Halo 5"
                        },
                        new
                        {
                            GameVesionID = 6,
                            GameVersionName = "Halo Infinite"
                        });
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Match", b =>
                {
                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MatchID");

                    b.ToTable("Matches", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchesHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchBracketInfo", b =>
                {
                    b.Property<int>("MatchBracketInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchBracketInfoID"));

                    b.Property<int?>("AwayTeamPreviousMatchBracketInfoID")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamSeedNumber")
                        .HasColumnType("int");

                    b.Property<int>("Bracket")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamPreviousMatchBracketInfoID")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamSeedNumber")
                        .HasColumnType("int");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeasonMatchID")
                        .HasColumnType("int");

                    b.HasKey("MatchBracketInfoID");

                    b.HasIndex("AwayTeamPreviousMatchBracketInfoID");

                    b.HasIndex("HomeTeamPreviousMatchBracketInfoID");

                    b.HasIndex("SeasonMatchID")
                        .IsUnique();

                    b.ToTable("MatchBracketInfo", "Event", t =>
                        {
                            t.HasCheckConstraint("CK_Event_MatchBracketInfo_RequireAwaySeedOrPreviousMatch", "\r\n(AwayTeamSeedNumber IS NOT NULL AND AwayTeamPreviousMatchBracketInfoID IS NULL) OR\r\n(AwayTeamPreviousMatchBracketInfoID IS NOT NULL AND AwayTeamSeedNumber IS NULL)\r\n");

                            t.HasCheckConstraint("CK_Event_MatchBracketInfo_RequireHomeSeedOrPreviousMatch", "\r\n(HomeTeamSeedNumber IS NOT NULL AND HomeTeamPreviousMatchBracketInfoID IS NULL) OR\r\n(HomeTeamPreviousMatchBracketInfoID IS NOT NULL AND HomeTeamSeedNumber IS NULL)\r\n");
                        });

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchBracketInfoHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchLink", b =>
                {
                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeasonMatchID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("MatchID", "SeasonMatchID");

                    b.HasIndex("MatchID")
                        .IsUnique();

                    b.HasIndex("SeasonMatchID")
                        .IsUnique();

                    b.ToTable("MatchLinks", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchLinksHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchParticipant", b =>
                {
                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("XboxUserID")
                        .HasColumnType("bigint");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("AverageLife")
                        .HasColumnType("time");

                    b.Property<int>("Betrayals")
                        .HasColumnType("int");

                    b.Property<int>("CalloutAssists")
                        .HasColumnType("int");

                    b.Property<int>("DamageDealt")
                        .HasColumnType("int");

                    b.Property<int>("DamageTaken")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<float>("Kda")
                        .HasColumnType("real");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("MaxKillingSpree")
                        .HasColumnType("int");

                    b.Property<int>("MeleeKills")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PowerWeaponKills")
                        .HasColumnType("int");

                    b.Property<int>("ShotsFired")
                        .HasColumnType("int");

                    b.Property<int>("ShotsHit")
                        .HasColumnType("int");

                    b.Property<int>("Suicides")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("MatchID", "XboxUserID");

                    b.HasIndex("XboxUserID");

                    b.ToTable("MatchParticipants", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchParticipantsHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Medal", b =>
                {
                    b.Property<long>("MedalID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedalDifficultyID")
                        .HasColumnType("int");

                    b.Property<string>("MedalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedalTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PersonalScore")
                        .HasColumnType("int");

                    b.Property<int>("SortingWeight")
                        .HasColumnType("int");

                    b.Property<int>("SpriteIndex")
                        .HasColumnType("int");

                    b.HasKey("MedalID");

                    b.HasIndex("MedalDifficultyID");

                    b.HasIndex("MedalTypeID");

                    b.ToTable("Medals", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MedalsHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalDifficulty", b =>
                {
                    b.Property<int>("MedalDifficultyID")
                        .HasColumnType("int");

                    b.Property<string>("MedalDifficultyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("MedalDifficultyID");

                    b.ToTable("MedalDifficulties", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MedalDifficultiesHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalEarned", b =>
                {
                    b.Property<long>("MedalID")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("XboxUserID")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("TotalPersonalScoreAwarded")
                        .HasColumnType("int");

                    b.HasKey("MedalID", "MatchID", "XboxUserID");

                    b.HasIndex("MatchID", "XboxUserID");

                    b.ToTable("MedalEarned", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MedalEarnedHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalType", b =>
                {
                    b.Property<int>("MedalTypeID")
                        .HasColumnType("int");

                    b.Property<string>("MedalTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("MedalTypeID");

                    b.ToTable("MedalTypes", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MedalTypesHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Password", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonID");

                    b.ToTable("Passwords", "Account");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("PasswordsHistory", "Account");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int?>("RegionID")
                        .HasColumnType("int");

                    b.Property<long>("XboxUserID")
                        .HasColumnType("bigint");

                    b.HasKey("PersonID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionID");

                    b.HasIndex("XboxUserID")
                        .IsUnique();

                    b.ToTable("Persons", "ITS");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("PersonsHistory", "ITS");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.PersonExperience", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("GameVersionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("PersonID", "GameVersionID");

                    b.HasIndex("GameVersionID");

                    b.ToTable("PersonExperiences", "ITS");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("PersonExperiencesHistory", "ITS");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.PersonRole", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("PersonID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("PersonRoles", "ITS");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("PersonRolesHistory", "ITS");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionID"));

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RegionID");

                    b.HasIndex("RegionName")
                        .IsUnique();

                    b.ToTable("Regions", "ITS");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("RegionsHistory", "ITS");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            RegionID = 1,
                            RegionName = "West North America"
                        },
                        new
                        {
                            RegionID = 2,
                            RegionName = "Central North America"
                        },
                        new
                        {
                            RegionID = 3,
                            RegionName = "East North America"
                        },
                        new
                        {
                            RegionID = 4,
                            RegionName = "North Europe"
                        },
                        new
                        {
                            RegionID = 5,
                            RegionName = "South Europe"
                        },
                        new
                        {
                            RegionID = 6,
                            RegionName = "Australia"
                        });
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("RoleID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", "ITS");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("RolesHistory", "ITS");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Name = "Sysadmin"
                        },
                        new
                        {
                            RoleID = 2,
                            Name = "Player"
                        },
                        new
                        {
                            RoleID = 4,
                            Name = "EventOrganizer"
                        });
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Season", b =>
                {
                    b.Property<int>("SeasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonID"));

                    b.Property<bool>("CaptainsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DraftStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("SeasonEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("SeasonStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SignupsClose")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SignupsOpen")
                        .HasColumnType("datetime2");

                    b.HasKey("SeasonID");

                    b.HasIndex("SeasonName")
                        .IsUnique();

                    b.ToTable("Seasons", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SeasonsHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonMatch", b =>
                {
                    b.Property<int>("SeasonMatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonMatchID"));

                    b.Property<int?>("AwayTeamID")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.HasKey("SeasonMatchID");

                    b.HasIndex("AwayTeamID");

                    b.HasIndex("HomeTeamID");

                    b.HasIndex("SeasonID");

                    b.ToTable("SeasonMatches", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SeasonMatchesHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonSignup", b =>
                {
                    b.Property<int>("SeasonSignupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonSignupID"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresAssistanceDrafting")
                        .HasColumnType("bit");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WillCaptain")
                        .HasColumnType("bit");

                    b.HasKey("SeasonSignupID");

                    b.HasIndex("SeasonID");

                    b.HasIndex("PersonID", "SeasonID")
                        .IsUnique();

                    b.ToTable("SeasonSignups", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SeasonSignupsHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"));

                    b.Property<int?>("CaptainID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("TeamID");

                    b.HasIndex("CaptainID")
                        .IsUnique()
                        .HasFilter("[CaptainID] IS NOT NULL");

                    b.HasIndex("SeasonID");

                    b.HasIndex("TeamName", "SeasonID")
                        .IsUnique()
                        .HasFilter("[TeamName] IS NOT NULL");

                    b.ToTable("Teams", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("TeamsHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.TeamPlayer", b =>
                {
                    b.Property<int>("TeamPlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamPlayerID"));

                    b.Property<int?>("DraftCaptainOrder")
                        .HasColumnType("int");

                    b.Property<int?>("DraftPick")
                        .HasColumnType("int");

                    b.Property<int?>("DraftRound")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("TeamPlayerID");

                    b.HasIndex("TeamID");

                    b.HasIndex("PlayerID", "TeamID")
                        .IsUnique();

                    b.ToTable("TeamPlayers", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("TeamPlayersHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.XboxUser", b =>
                {
                    b.Property<long>("XboxUserID")
                        .HasColumnType("bigint");

                    b.Property<string>("Gamertag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("XboxUserID");

                    b.ToTable("XboxUsers", "Xbox");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("XboxUsersHistory", "Xbox");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchBracketInfo", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.MatchBracketInfo", "AwayTeamPreviousMatchBracketInfo")
                        .WithMany("InverseAwayTeamNextMatchBracketInfo")
                        .HasForeignKey("AwayTeamPreviousMatchBracketInfoID");

                    b.HasOne("GrifballWebApp.Database.Models.MatchBracketInfo", "HomeTeamPreviousMatchBracketInfo")
                        .WithMany("InverseHomeTeamPreviousMatchBracketInfo")
                        .HasForeignKey("HomeTeamPreviousMatchBracketInfoID");

                    b.HasOne("GrifballWebApp.Database.Models.SeasonMatch", "SeasonMatch")
                        .WithOne("BracketMatch")
                        .HasForeignKey("GrifballWebApp.Database.Models.MatchBracketInfo", "SeasonMatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeamPreviousMatchBracketInfo");

                    b.Navigation("HomeTeamPreviousMatchBracketInfo");

                    b.Navigation("SeasonMatch");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchLink", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Match", "Match")
                        .WithOne("MatchLink")
                        .HasForeignKey("GrifballWebApp.Database.Models.MatchLink", "MatchID");

                    b.HasOne("GrifballWebApp.Database.Models.SeasonMatch", "SeasonMatch")
                        .WithOne("MatchLink")
                        .HasForeignKey("GrifballWebApp.Database.Models.MatchLink", "SeasonMatchID");

                    b.Navigation("Match");

                    b.Navigation("SeasonMatch");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchParticipant", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Match", "Match")
                        .WithMany("MatchParticipants")
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.XboxUser", "XboxUser")
                        .WithMany("MatchParticipants")
                        .HasForeignKey("XboxUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("XboxUser");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Medal", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.MedalDifficulty", "MedalDifficulty")
                        .WithMany("Medals")
                        .HasForeignKey("MedalDifficultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.MedalType", "MedalType")
                        .WithMany("Medals")
                        .HasForeignKey("MedalTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedalDifficulty");

                    b.Navigation("MedalType");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalEarned", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Medal", "Medal")
                        .WithMany("MedalEarned")
                        .HasForeignKey("MedalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.MatchParticipant", "MatchParticipant")
                        .WithMany("MedalEarned")
                        .HasForeignKey("MatchID", "XboxUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchParticipant");

                    b.Navigation("Medal");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Password", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Person", "Person")
                        .WithOne("Password")
                        .HasForeignKey("GrifballWebApp.Database.Models.Password", "PersonID");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Person", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Region", "Region")
                        .WithMany("Persons")
                        .HasForeignKey("RegionID");

                    b.HasOne("GrifballWebApp.Database.Models.XboxUser", "XboxUser")
                        .WithOne("Person")
                        .HasForeignKey("GrifballWebApp.Database.Models.Person", "XboxUserID");

                    b.Navigation("Region");

                    b.Navigation("XboxUser");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.PersonExperience", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.GameVersion", "GameVersion")
                        .WithMany("PersonExperiences")
                        .HasForeignKey("GameVersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.Person", "Person")
                        .WithMany("PersonExperiences")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameVersion");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.PersonRole", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Person", "Person")
                        .WithMany("PersonRoles")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.Role", "Role")
                        .WithMany("PersonRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonMatch", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GrifballWebApp.Database.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GrifballWebApp.Database.Models.Season", "Season")
                        .WithMany("SeasonMatches")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonSignup", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Person", "Person")
                        .WithMany("SeasonSignups")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.Season", "Season")
                        .WithMany("SeasonSignups")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Team", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.TeamPlayer", "Captain")
                        .WithOne("CaptainTeam")
                        .HasForeignKey("GrifballWebApp.Database.Models.Team", "CaptainID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GrifballWebApp.Database.Models.Season", "Season")
                        .WithMany("Teams")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Captain");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.TeamPlayer", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Person", "Person")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.Team", "Team")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.GameVersion", b =>
                {
                    b.Navigation("PersonExperiences");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Match", b =>
                {
                    b.Navigation("MatchLink");

                    b.Navigation("MatchParticipants");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchBracketInfo", b =>
                {
                    b.Navigation("InverseAwayTeamNextMatchBracketInfo");

                    b.Navigation("InverseHomeTeamPreviousMatchBracketInfo");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchParticipant", b =>
                {
                    b.Navigation("MedalEarned");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Medal", b =>
                {
                    b.Navigation("MedalEarned");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalDifficulty", b =>
                {
                    b.Navigation("Medals");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalType", b =>
                {
                    b.Navigation("Medals");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Person", b =>
                {
                    b.Navigation("Password");

                    b.Navigation("PersonExperiences");

                    b.Navigation("PersonRoles");

                    b.Navigation("SeasonSignups");

                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Region", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Role", b =>
                {
                    b.Navigation("PersonRoles");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Season", b =>
                {
                    b.Navigation("SeasonMatches");

                    b.Navigation("SeasonSignups");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonMatch", b =>
                {
                    b.Navigation("BracketMatch");

                    b.Navigation("MatchLink");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.TeamPlayer", b =>
                {
                    b.Navigation("CaptainTeam");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.XboxUser", b =>
                {
                    b.Navigation("MatchParticipants");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
