// <auto-generated />
using System;
using GrifballWebApp.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GrifballWebApp.Database.Migrations
{
    [DbContext(typeof(GrifballContext))]
    partial class GrifballContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrifballWebApp.Database.Models.AvailabilityOption", b =>
                {
                    b.Property<int>("AvailabilityOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityOptionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("AvailabilityOptionID");

                    b.HasIndex("DayOfWeek", "Time")
                        .IsUnique();

                    b.ToTable("AvailabilityOptions", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AvailabilityOptionsHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.DiscordMessage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<long>("FromDiscordUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<long>("ToDiscordUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromDiscordUserId");

                    b.HasIndex("ToDiscordUserId");

                    b.ToTable("Messages", "Discord");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MessagesHistory", "Discord");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.DiscordUser", b =>
                {
                    b.Property<long>("DiscordUserID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("DiscordUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("DiscordUserID");

                    b.ToTable("Discord", "User");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("DiscordHistory", "User");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.GameVersion", b =>
                {
                    b.Property<int>("GameVesionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameVesionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("GameVersionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("GameVesionID");

                    b.HasIndex("GameVersionName")
                        .IsUnique();

                    b.ToTable("GameVersions", "Other");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("GameVersionsHistory", "Other");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            GameVesionID = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameVersionName = "Halo 3",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GameVesionID = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameVersionName = "Halo Reach",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GameVesionID = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameVersionName = "Halo Reach Dash",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GameVesionID = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameVersionName = "Halo 4",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GameVesionID = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameVersionName = "Halo 5",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            GameVesionID = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameVersionName = "Halo Infinite",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Match", b =>
                {
                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StatsPullDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MatchID");

                    b.ToTable("Matches", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchesHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchBracketInfo", b =>
                {
                    b.Property<int>("MatchBracketInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchBracketInfoID"));

                    b.Property<int?>("AwayTeamPreviousMatchBracketInfoID")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamSeedNumber")
                        .HasColumnType("int");

                    b.Property<int>("Bracket")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamPreviousMatchBracketInfoID")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamSeedNumber")
                        .HasColumnType("int");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeasonMatchID")
                        .HasColumnType("int");

                    b.HasKey("MatchBracketInfoID");

                    b.HasIndex("AwayTeamPreviousMatchBracketInfoID");

                    b.HasIndex("HomeTeamPreviousMatchBracketInfoID");

                    b.HasIndex("SeasonMatchID")
                        .IsUnique();

                    b.ToTable("MatchBracketInfo", "Event", t =>
                        {
                            t.HasCheckConstraint("CK_Event_MatchBracketInfo_RequireAwaySeedOrPreviousMatch", "(AwayTeamSeedNumber IS NOT NULL AND AwayTeamPreviousMatchBracketInfoID IS NULL) OR (AwayTeamPreviousMatchBracketInfoID IS NOT NULL AND AwayTeamSeedNumber IS NULL)");

                            t.HasCheckConstraint("CK_Event_MatchBracketInfo_RequireHomeSeedOrPreviousMatch", "(HomeTeamSeedNumber IS NOT NULL AND HomeTeamPreviousMatchBracketInfoID IS NULL) OR (HomeTeamPreviousMatchBracketInfoID IS NOT NULL AND HomeTeamSeedNumber IS NULL)");
                        });

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchBracketInfoHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchLink", b =>
                {
                    b.Property<int>("MatchLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchLinkID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("SeasonMatchID")
                        .HasColumnType("int");

                    b.HasKey("MatchLinkID");

                    b.HasIndex("MatchID")
                        .IsUnique();

                    b.HasIndex("SeasonMatchID", "MatchNumber")
                        .IsUnique();

                    b.ToTable("MatchLinks", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchLinksHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchParticipant", b =>
                {
                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("XboxUserID")
                        .HasColumnType("bigint");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("AverageLife")
                        .HasColumnType("time");

                    b.Property<int>("Betrayals")
                        .HasColumnType("int");

                    b.Property<int>("CalloutAssists")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("DamageDealt")
                        .HasColumnType("int");

                    b.Property<int>("DamageTaken")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstJoinedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("JoinedInProgress")
                        .HasColumnType("bit");

                    b.Property<float>("Kda")
                        .HasColumnType("real");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLeaveTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LeftInProgress")
                        .HasColumnType("bit");

                    b.Property<int>("MaxKillingSpree")
                        .HasColumnType("int");

                    b.Property<int>("MeleeKills")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<int>("ObjectivesCompleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PersonalScore")
                        .HasColumnType("int");

                    b.Property<int>("PowerWeaponKills")
                        .HasColumnType("int");

                    b.Property<bool>("PresentAtBeginning")
                        .HasColumnType("bit");

                    b.Property<bool>("PresentAtCompletion")
                        .HasColumnType("bit");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RoundsLost")
                        .HasColumnType("int");

                    b.Property<int>("RoundsTied")
                        .HasColumnType("int");

                    b.Property<int>("RoundsWon")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("ShotsFired")
                        .HasColumnType("int");

                    b.Property<int>("ShotsHit")
                        .HasColumnType("int");

                    b.Property<int>("Spawns")
                        .HasColumnType("int");

                    b.Property<int>("Suicides")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimePlayed")
                        .HasColumnType("time");

                    b.HasKey("MatchID", "XboxUserID");

                    b.HasIndex("XboxUserID");

                    b.HasIndex("MatchID", "TeamID");

                    b.ToTable("MatchParticipants", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchParticipantsHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchReschedule", b =>
                {
                    b.Property<int>("MatchRescheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchRescheduleID"));

                    b.Property<int?>("ApprovedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("CommissionerNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscordThreadID")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NewScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OriginalScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedByUserID")
                        .HasColumnType("int");

                    b.Property<int>("SeasonMatchID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MatchRescheduleID");

                    b.HasIndex("ApprovedByUserID");

                    b.HasIndex("DiscordThreadID");

                    b.HasIndex("RequestedAt");

                    b.HasIndex("RequestedByUserID");

                    b.HasIndex("SeasonMatchID");

                    b.HasIndex("Status");

                    b.ToTable("MatchReschedules");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchTeam", b =>
                {
                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<int>("Outcome")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("MatchID", "TeamID");

                    b.ToTable("MatchTeams", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchTeamsHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedKickVote", b =>
                {
                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("VoterMatchedPlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("KickMatchedPlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("MatchId", "VoterMatchedPlayerId");

                    b.HasIndex("KickMatchedPlayerId");

                    b.HasIndex("VoterMatchedPlayerId");

                    b.ToTable("MatchedKickVotes", "Matchmaking");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchedKickVotesHistory", "Matchmaking");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<Guid?>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ThreadID")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("VoteMessageID")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId")
                        .IsUnique();

                    b.HasIndex("HomeTeamId")
                        .IsUnique();

                    b.HasIndex("MatchID")
                        .IsUnique()
                        .HasFilter("[MatchID] IS NOT NULL");

                    b.ToTable("MatchedMatches", "Matchmaking");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchedMatchesHistory", "Matchmaking");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<bool>("Kicked")
                        .HasColumnType("bit");

                    b.Property<int>("MatchedTeamID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchedTeamID");

                    b.HasIndex("UserID");

                    b.ToTable("MatchedPlayers", "Matchmaking");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchedPlayersHistory", "Matchmaking");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedTeam", b =>
                {
                    b.Property<int>("MatchedTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchedTeamId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("MatchedTeamId");

                    b.ToTable("MatchedTeams", "Matchmaking");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchedTeamsHistory", "Matchmaking");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedWinnerVote", b =>
                {
                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("MatchedPlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("WinnerVote")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "MatchedPlayerId");

                    b.HasIndex("MatchedPlayerId");

                    b.ToTable("MatchedWinnerVotes", "Matchmaking");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MatchedWinnerVotesHistory", "Matchmaking");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Medal", b =>
                {
                    b.Property<long>("MedalID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedalDifficultyID")
                        .HasColumnType("int");

                    b.Property<string>("MedalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedalTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PersonalScore")
                        .HasColumnType("int");

                    b.Property<int>("SortingWeight")
                        .HasColumnType("int");

                    b.Property<int>("SpriteIndex")
                        .HasColumnType("int");

                    b.HasKey("MedalID");

                    b.HasIndex("MedalDifficultyID");

                    b.HasIndex("MedalTypeID");

                    b.ToTable("Medals", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MedalsHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalDifficulty", b =>
                {
                    b.Property<int>("MedalDifficultyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("MedalDifficultyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("MedalDifficultyID");

                    b.ToTable("MedalDifficulties", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MedalDifficultiesHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalEarned", b =>
                {
                    b.Property<long>("MedalID")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MatchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("XboxUserID")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("TotalPersonalScoreAwarded")
                        .HasColumnType("int");

                    b.HasKey("MedalID", "MatchID", "XboxUserID");

                    b.HasIndex("MatchID", "XboxUserID");

                    b.ToTable("MedalEarned", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MedalEarnedHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalType", b =>
                {
                    b.Property<int>("MedalTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("MedalTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("MedalTypeID");

                    b.ToTable("MedalTypes", "Infinite");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MedalTypesHistory", "Infinite");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.QueuedPlayer", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("UserID");

                    b.ToTable("QueuedPlayers", "Matchmaking");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("QueuedPlayersHistory", "Matchmaking");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Icon")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("MmrThreshold")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.ToTable("Ranks", "Matchmaking");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("RanksHistory", "Matchmaking");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RegionID");

                    b.HasIndex("RegionName")
                        .IsUnique();

                    b.ToTable("Regions", "Other");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("RegionsHistory", "Other");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            RegionID = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "West North America"
                        },
                        new
                        {
                            RegionID = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "Central North America"
                        },
                        new
                        {
                            RegionID = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "East North America"
                        },
                        new
                        {
                            RegionID = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "North Europe"
                        },
                        new
                        {
                            RegionID = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "South Europe"
                        },
                        new
                        {
                            RegionID = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegionName = "Australia"
                        });
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Auth");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("RolesHistory", "Auth");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "cda78946-53d4-4154-b723-2b33b95341cc",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sysadmin",
                            NormalizedName = "SYSADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "37ff5fdf-5cb8-403c-bb9e-81db05a5fcdd",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Commissioner",
                            NormalizedName = "COMMISSIONER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "0be992c7-f824-40c7-8975-964068c7fbfe",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Season", b =>
                {
                    b.Property<int>("SeasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonID"));

                    b.Property<bool>("CaptainsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DraftStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("PublicAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SeasonEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("SeasonStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SignupsClose")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SignupsOpen")
                        .HasColumnType("datetime2");

                    b.HasKey("SeasonID");

                    b.HasIndex("SeasonName")
                        .IsUnique();

                    b.ToTable("Seasons", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SeasonsHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonAvailability", b =>
                {
                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<int>("AvailabilityOptionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("SeasonID", "AvailabilityOptionID");

                    b.HasIndex("AvailabilityOptionID");

                    b.ToTable("SeasonAvailability", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SeasonAvailabilityHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonMatch", b =>
                {
                    b.Property<int>("SeasonMatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonMatchID"));

                    b.Property<int?>("ActiveRescheduleRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamID")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamResult")
                        .HasColumnType("int");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<int>("BestOf")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamID")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamResult")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.HasKey("SeasonMatchID");

                    b.HasIndex("ActiveRescheduleRequestId")
                        .IsUnique()
                        .HasFilter("[ActiveRescheduleRequestId] IS NOT NULL");

                    b.HasIndex("AwayTeamID");

                    b.HasIndex("HomeTeamID");

                    b.HasIndex("SeasonID");

                    b.ToTable("SeasonMatches", "Event", t =>
                        {
                            t.HasCheckConstraint("CK_Event_SeasonMatches_MustBeDifferentTeams", "(HomeTeamID IS NULL) OR (AwayTeamID IS NULL) OR (HomeTeamID != AwayTeamID)");
                        });

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SeasonMatchesHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonSignup", b =>
                {
                    b.Property<int>("SeasonSignupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonSignupID"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<bool>("RequiresAssistanceDrafting")
                        .HasColumnType("bit");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("WillCaptain")
                        .HasColumnType("bit");

                    b.HasKey("SeasonSignupID");

                    b.HasIndex("SeasonID");

                    b.HasIndex("UserID", "SeasonID")
                        .IsUnique();

                    b.ToTable("SeasonSignups", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SeasonSignupsHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SignupAvailability", b =>
                {
                    b.Property<int>("SeasonSignupID")
                        .HasColumnType("int");

                    b.Property<int>("AvailabilityOptionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("SeasonSignupID", "AvailabilityOptionID");

                    b.HasIndex("AvailabilityOptionID");

                    b.ToTable("SignupAvailability", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SignupAvailabilityHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"));

                    b.Property<int?>("CaptainID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("SeasonID")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("TeamID");

                    b.HasIndex("CaptainID")
                        .IsUnique()
                        .HasFilter("[CaptainID] IS NOT NULL");

                    b.HasIndex("SeasonID");

                    b.HasIndex("TeamName", "SeasonID")
                        .IsUnique()
                        .HasFilter("[TeamName] IS NOT NULL");

                    b.ToTable("Teams", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("TeamsHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.TeamAvailability", b =>
                {
                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<int>("AvailabilityOptionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("TeamID", "AvailabilityOptionID");

                    b.HasIndex("AvailabilityOptionID");

                    b.ToTable("TeamAvailability", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("TeamAvailabilityHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.TeamPlayer", b =>
                {
                    b.Property<int>("TeamPlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamPlayerID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int?>("DraftCaptainOrder")
                        .HasColumnType("int");

                    b.Property<int?>("DraftPick")
                        .HasColumnType("int");

                    b.Property<int?>("DraftRound")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TeamPlayerID");

                    b.HasIndex("TeamID");

                    b.HasIndex("UserID", "TeamID")
                        .IsUnique();

                    b.ToTable("TeamPlayers", "Event");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("TeamPlayersHistory", "Event");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<long?>("DiscordUserID")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDummyUser")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LossStreak")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("MMR")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RegionID")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("WinStreak")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.Property<long?>("XboxUserID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscordUserID")
                        .IsUnique()
                        .HasFilter("[DiscordUserID] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RegionID");

                    b.HasIndex("XboxUserID")
                        .IsUnique()
                        .HasFilter("[XboxUserID] IS NOT NULL");

                    b.ToTable("Users", "Auth");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("UsersHistory", "Auth");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Auth");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("UserClaimsHistory", "Auth");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.UserExperience", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("GameVersionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("UserID", "GameVersionID");

                    b.HasIndex("GameVersionID");

                    b.ToTable("UserExperiences", "Other");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("UserExperiencesHistory", "Other");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Auth");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("UserLoginsHistory", "Auth");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Auth");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("UserRolesHistory", "Auth");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.XboxUser", b =>
                {
                    b.Property<long>("XboxUserID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("Gamertag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("XboxUserID");

                    b.ToTable("XboxUsers", "Xbox");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("XboxUsersHistory", "Xbox");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys", "Auth");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("DataProtectionKeysHistory", "Auth");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Auth");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("RoleClaimsHistory", "Auth");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Auth");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("UserTokensHistory", "Auth");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.DiscordMessage", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.DiscordUser", "FromDiscordUser")
                        .WithMany("SentMessages")
                        .HasForeignKey("FromDiscordUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.DiscordUser", "ToDiscordUser")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ToDiscordUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromDiscordUser");

                    b.Navigation("ToDiscordUser");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchBracketInfo", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.MatchBracketInfo", "AwayTeamPreviousMatchBracketInfo")
                        .WithMany("InverseAwayTeamNextMatchBracketInfo")
                        .HasForeignKey("AwayTeamPreviousMatchBracketInfoID");

                    b.HasOne("GrifballWebApp.Database.Models.MatchBracketInfo", "HomeTeamPreviousMatchBracketInfo")
                        .WithMany("InverseHomeTeamPreviousMatchBracketInfo")
                        .HasForeignKey("HomeTeamPreviousMatchBracketInfoID");

                    b.HasOne("GrifballWebApp.Database.Models.SeasonMatch", "SeasonMatch")
                        .WithOne("BracketMatch")
                        .HasForeignKey("GrifballWebApp.Database.Models.MatchBracketInfo", "SeasonMatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeamPreviousMatchBracketInfo");

                    b.Navigation("HomeTeamPreviousMatchBracketInfo");

                    b.Navigation("SeasonMatch");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchLink", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Match", "Match")
                        .WithOne("MatchLink")
                        .HasForeignKey("GrifballWebApp.Database.Models.MatchLink", "MatchID");

                    b.HasOne("GrifballWebApp.Database.Models.SeasonMatch", "SeasonMatch")
                        .WithMany("MatchLinks")
                        .HasForeignKey("SeasonMatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("SeasonMatch");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchParticipant", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.XboxUser", "XboxUser")
                        .WithMany("MatchParticipants")
                        .HasForeignKey("XboxUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.MatchTeam", "MatchTeam")
                        .WithMany("MatchParticipants")
                        .HasForeignKey("MatchID", "TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchTeam");

                    b.Navigation("XboxUser");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchReschedule", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrifballWebApp.Database.Models.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.SeasonMatch", "SeasonMatch")
                        .WithMany()
                        .HasForeignKey("SeasonMatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("RequestedByUser");

                    b.Navigation("SeasonMatch");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchTeam", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Match", "Match")
                        .WithMany("MatchTeams")
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedKickVote", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.MatchedPlayer", "KickMatchedPlayer")
                        .WithMany("KickMatchedKickVotes")
                        .HasForeignKey("KickMatchedPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.MatchedMatch", "MatchedMatch")
                        .WithMany("MatchedKickVotes")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.MatchedPlayer", "VoterMatchedPlayer")
                        .WithMany("VoterMatchedKickVotes")
                        .HasForeignKey("VoterMatchedPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KickMatchedPlayer");

                    b.Navigation("MatchedMatch");

                    b.Navigation("VoterMatchedPlayer");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedMatch", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.MatchedTeam", "AwayTeam")
                        .WithOne("AwayMatchedMatch")
                        .HasForeignKey("GrifballWebApp.Database.Models.MatchedMatch", "AwayTeamId");

                    b.HasOne("GrifballWebApp.Database.Models.MatchedTeam", "HomeTeam")
                        .WithOne("HomeMatchedMatch")
                        .HasForeignKey("GrifballWebApp.Database.Models.MatchedMatch", "HomeTeamId");

                    b.HasOne("GrifballWebApp.Database.Models.Match", "Match")
                        .WithOne("MatchedMatch")
                        .HasForeignKey("GrifballWebApp.Database.Models.MatchedMatch", "MatchID");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedPlayer", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.MatchedTeam", "MatchedTeam")
                        .WithMany("Players")
                        .HasForeignKey("MatchedTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.User", "User")
                        .WithMany("MatchedPlayers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchedTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedWinnerVote", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.MatchedMatch", "MatchedMatch")
                        .WithMany("MatchedWinnerVotes")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.MatchedPlayer", "MatchedPlayer")
                        .WithMany("MatchedWinnerVotes")
                        .HasForeignKey("MatchedPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchedMatch");

                    b.Navigation("MatchedPlayer");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Medal", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.MedalDifficulty", "MedalDifficulty")
                        .WithMany("Medals")
                        .HasForeignKey("MedalDifficultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.MedalType", "MedalType")
                        .WithMany("Medals")
                        .HasForeignKey("MedalTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedalDifficulty");

                    b.Navigation("MedalType");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalEarned", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Medal", "Medal")
                        .WithMany("MedalEarned")
                        .HasForeignKey("MedalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.MatchParticipant", "MatchParticipant")
                        .WithMany("MedalEarned")
                        .HasForeignKey("MatchID", "XboxUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchParticipant");

                    b.Navigation("Medal");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.QueuedPlayer", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.User", "User")
                        .WithOne("QueuedPlayer")
                        .HasForeignKey("GrifballWebApp.Database.Models.QueuedPlayer", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonAvailability", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.AvailabilityOption", "AvailabilityOption")
                        .WithMany("SeasonAvailability")
                        .HasForeignKey("AvailabilityOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.Season", "Season")
                        .WithMany("SeasonAvailability")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityOption");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonMatch", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.MatchReschedule", "ActiveRescheduleRequest")
                        .WithOne()
                        .HasForeignKey("GrifballWebApp.Database.Models.SeasonMatch", "ActiveRescheduleRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrifballWebApp.Database.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GrifballWebApp.Database.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GrifballWebApp.Database.Models.Season", "Season")
                        .WithMany("SeasonMatches")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveRescheduleRequest");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonSignup", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Season", "Season")
                        .WithMany("SeasonSignups")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.User", "User")
                        .WithMany("SeasonSignups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SignupAvailability", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.AvailabilityOption", "AvailabilityOption")
                        .WithMany("SignupAvailability")
                        .HasForeignKey("AvailabilityOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.SeasonSignup", "SeasonSignup")
                        .WithMany("SignupAvailability")
                        .HasForeignKey("SeasonSignupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityOption");

                    b.Navigation("SeasonSignup");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Team", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.TeamPlayer", "Captain")
                        .WithOne("CaptainTeam")
                        .HasForeignKey("GrifballWebApp.Database.Models.Team", "CaptainID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GrifballWebApp.Database.Models.Season", "Season")
                        .WithMany("Teams")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Captain");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.TeamAvailability", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.AvailabilityOption", "AvailabilityOption")
                        .WithMany("TeamAvailability")
                        .HasForeignKey("AvailabilityOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.Team", "Team")
                        .WithMany("TeamAvailability")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityOption");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.TeamPlayer", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Team", "Team")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.User", "User")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.User", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.DiscordUser", "DiscordUser")
                        .WithOne("User")
                        .HasForeignKey("GrifballWebApp.Database.Models.User", "DiscordUserID");

                    b.HasOne("GrifballWebApp.Database.Models.Region", "Region")
                        .WithMany("Users")
                        .HasForeignKey("RegionID");

                    b.HasOne("GrifballWebApp.Database.Models.XboxUser", "XboxUser")
                        .WithOne("User")
                        .HasForeignKey("GrifballWebApp.Database.Models.User", "XboxUserID");

                    b.Navigation("DiscordUser");

                    b.Navigation("Region");

                    b.Navigation("XboxUser");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.UserClaim", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.UserExperience", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.GameVersion", "GameVersion")
                        .WithMany("UserExperiences")
                        .HasForeignKey("GameVersionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.User", "User")
                        .WithMany("PersonExperiences")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.UserLogin", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.UserRole", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrifballWebApp.Database.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GrifballWebApp.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.AvailabilityOption", b =>
                {
                    b.Navigation("SeasonAvailability");

                    b.Navigation("SignupAvailability");

                    b.Navigation("TeamAvailability");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.DiscordUser", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.GameVersion", b =>
                {
                    b.Navigation("UserExperiences");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Match", b =>
                {
                    b.Navigation("MatchLink");

                    b.Navigation("MatchTeams");

                    b.Navigation("MatchedMatch");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchBracketInfo", b =>
                {
                    b.Navigation("InverseAwayTeamNextMatchBracketInfo");

                    b.Navigation("InverseHomeTeamPreviousMatchBracketInfo");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchParticipant", b =>
                {
                    b.Navigation("MedalEarned");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchTeam", b =>
                {
                    b.Navigation("MatchParticipants");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedMatch", b =>
                {
                    b.Navigation("MatchedKickVotes");

                    b.Navigation("MatchedWinnerVotes");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedPlayer", b =>
                {
                    b.Navigation("KickMatchedKickVotes");

                    b.Navigation("MatchedWinnerVotes");

                    b.Navigation("VoterMatchedKickVotes");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MatchedTeam", b =>
                {
                    b.Navigation("AwayMatchedMatch");

                    b.Navigation("HomeMatchedMatch");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Medal", b =>
                {
                    b.Navigation("MedalEarned");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalDifficulty", b =>
                {
                    b.Navigation("Medals");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.MedalType", b =>
                {
                    b.Navigation("Medals");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Region", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Season", b =>
                {
                    b.Navigation("SeasonAvailability");

                    b.Navigation("SeasonMatches");

                    b.Navigation("SeasonSignups");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonMatch", b =>
                {
                    b.Navigation("BracketMatch");

                    b.Navigation("MatchLinks");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.SeasonSignup", b =>
                {
                    b.Navigation("SignupAvailability");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("TeamAvailability");

                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.TeamPlayer", b =>
                {
                    b.Navigation("CaptainTeam");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.User", b =>
                {
                    b.Navigation("MatchedPlayers");

                    b.Navigation("PersonExperiences");

                    b.Navigation("QueuedPlayer");

                    b.Navigation("SeasonSignups");

                    b.Navigation("TeamPlayers");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("GrifballWebApp.Database.Models.XboxUser", b =>
                {
                    b.Navigation("MatchParticipants");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
